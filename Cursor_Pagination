from rest_framework.pagination import CursorPagination

class MyCursorPagination(CursorPagination):
    page_size = 1
    ordering = '-id'
    
    
from .cursorpagination import MyCursorPagination


class newsListApiView(APIView):
	pagination_class = MyCursorPagination
	@property
	def paginator(self):
		if not hasattr(self, '_paginator'):
			if self.pagination_class is None:
					self._paginator = None
			else:
				self._paginator = self.pagination_class()
		return self._paginator

	def paginate_queryset(self, queryset):
		if self.paginator is None:
			return None
		return self.paginator.paginate_queryset(queryset, self.request, view=self)

	def get_paginated_response(self, data):
		assert self.paginator is not None
		return self.paginator.get_paginated_response(data)

	def get(self, request , pk=None , format = None):
		id = pk
		if id is not None:
			stu = blogNews.objects.get(id=id)
			serializer = blogNewsSerializer(stu)
			return Response(serializer.data)
		else:
			stu = blogNews.objects.all().order_by('-dateOfNews', '-created')
			page = self.paginate_queryset(stu)
			serializer = blogNewsSerializer(page, many=True)
			return self.get_paginated_response(serializer.data)
